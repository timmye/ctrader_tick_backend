<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>FX Tick Visual Prototype</title>
  <style>
    body {
      background: #111;
      color: #eee;
      font-family: sans-serif;
      display: flex;
      gap: 40px;
      padding: 30px;
    }

    .meterContainer {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    /* Pulse Bar */
    #tickPulseBox {
      position: relative;
      width: 20px;
      height: 120px;
      background: #222;
      border: 1px solid #444;
    }

    #tickPulseUp,
    #tickPulseDown {
      width: 100%;
      position: absolute;
      left: 0;
      bottom: 50%;
      opacity: 0;
      transition: height 0.15s, opacity 0.25s;
    }

    #tickPulseUp {
      background: lime;
      transform-origin: bottom;
    }

    #tickPulseDown {
      background: red;
      transform-origin: top;
    }

    .zeroLine {
      position: absolute;
      bottom: 50%;
      left: 0;
      width: 100%;
      height: 2px;
      background: #888;
    }

    /* Float Valve (3.1) */
    #floatValve {
      position: absolute;
      left: 25px;
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: cyan;
      transition: bottom 0.15s ease-out;
      pointer-events: none;
    }

    /* Tick History */
    #tickHistory {
      position: relative;
      width: 220px;
      height: 120px;
      border: 1px solid #444;
      background: #181818;
      overflow: hidden;
    }

    .tickDot {
      position: absolute;
      width: 4px;
      height: 4px;
      border-radius: 50%;
      background: yellow;
    }

    .maxMarker {
      position: absolute;
      left: 0;
      width: 100%;
      height: 1px;
      background: magenta;
    }

    .adrLine {
      position: absolute;
      left: 0;
      width: 100%;
      height: 1px;
      background: #444;
    }

    .readout {
      margin-top: 10px;
      font-size: 14px;
      color: #aaa;
    }
  </style>
</head>
<body>

  <div class="meterContainer">
    <div id="tickPulseBox">
      <div id="tickPulseUp"></div>
      <div id="tickPulseDown"></div>
      <div class="zeroLine"></div>
      <div id="floatValve"></div>
    </div>
    <div class="readout" id="priceReadout">Mid: 1.00000</div>
    <div class="readout" id="adrReadout">ADR ±50 pips</div>
  </div>

  <div class="meterContainer">
    <div id="tickHistory">
      <div class="adrLine" style="bottom: calc(50% + 50px);"></div>
      <div class="adrLine" style="bottom: calc(50% - 50px);"></div>
      <div id="maxMarker" class="maxMarker"></div>
    </div>
    <div class="readout">Tick Trail (Δ > 0.1 pip)</div>
  </div>

  <script>
    const pip = 0.0001;
    const minPulseThreshold = 5 * pip;
    const minDotThreshold = 0.1 * pip;
    const adrPips = 50;

    let mid = 1.00000;
    let basePrice = mid;
    let maxDeflection = 0;
    let valvePrice = mid;

    const pulseUp = document.getElementById("tickPulseUp");
    const pulseDown = document.getElementById("tickPulseDown");
    const tickHistory = document.getElementById("tickHistory");
    const priceReadout = document.getElementById("priceReadout");
    const adrReadout = document.getElementById("adrReadout");
    const floatValve = document.getElementById("floatValve");
    const maxMarker = document.getElementById("maxMarker");

    let tickPoints = [];
    const maxTicks = 40;
    const containerHeight = 120;

    function simulateTick() {
      const maxPips = 15;
      const changePips = (Math.floor(Math.random() * maxPips * 2) - maxPips);
      const change = changePips * pip;
      const direction = Math.sign(change);

      mid += change;
      mid = Math.round(mid * 100000) / 100000;

      const delta = mid - basePrice;
      const absDelta = Math.abs(delta);
      const dir = Math.sign(delta);

      priceReadout.textContent = `Mid: ${mid.toFixed(5)} (${(delta / pip).toFixed(1)} pips)`;
      adrReadout.textContent = `ADR ±${adrPips} pips`;

      triggerPulse(change, direction);
      addTickTrail(delta);
      updateFloatValve();
      updateMaxDeflection(delta);

      setTimeout(simulateTick, Math.random() * 700 + 300);
    }

    function triggerPulse(changeSize, direction) {
      if (Math.abs(changeSize) < minPulseThreshold) return;
      const magnitude = Math.log10(Math.abs(changeSize) / pip + 1);
      const height = Math.min(60, magnitude * 12);

      if (direction > 0) {
        pulseUp.style.height = `${height}px`;
        pulseUp.style.opacity = 1;
        pulseDown.style.opacity = 0;
      } else {
        pulseDown.style.height = `${height}px`;
        pulseDown.style.opacity = 1;
        pulseUp.style.opacity = 0;
      }

      setTimeout(() => {
        pulseUp.style.opacity = 0;
        pulseDown.style.opacity = 0;
      }, 300);
    }

    function updateFloatValve() {
      const k = 0.3; // easing factor
      valvePrice += (mid - valvePrice) * k;
      const def = valvePrice - basePrice;
      const norm = def / (adrPips * pip);
      const y = 60 + norm * 60;
      floatValve.style.bottom = `${Math.max(0, Math.min(120, y))}px`;
    }

    function addTickTrail(delta) {
      if (Math.abs(delta) < minDotThreshold) return;

      const norm = Math.max(-1, Math.min(1, delta / (adrPips * pip)));
      const y = 60 + norm * 60;

      tickPoints.push({ y });
      if (tickPoints.length > maxTicks) tickPoints.shift();
      renderTrail();
    }

    function renderTrail() {
      tickHistory.querySelectorAll('.tickDot').forEach(dot => dot.remove());
      tickPoints.forEach((pt, i) => {
        const dot = document.createElement("div");
        dot.className = "tickDot";
        dot.style.left = `${i * 5}px`;
        dot.style.bottom = `${pt.y}px`;
        tickHistory.appendChild(dot);
      });
    }

    function updateMaxDeflection(delta) {
      const abs = Math.abs(delta);
      if (abs > maxDeflection) {
        maxDeflection = abs;
        const norm = delta / (adrPips * pip);
        const y = 60 + norm * 60;
        maxMarker.style.bottom = `${Math.max(0, Math.min(119, y))}px`;
      }
    }

    simulateTick();
  </script>

</body>
</html>
